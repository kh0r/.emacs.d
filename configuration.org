#+TITLE: Emacs configuration

* Package management

This configuration uses =cask= and =pallet= for managing packages.

This configuration assumes that you installed cask via curl.

After you installed cask visit your "~/.emacs.d" directory and run =cask install= in it.
Now just start =emacs= and you're all set.
Every package you will install via =package-list= or =package-install= will be automatically added to your Cask file
as a dependency of your configuration.

#+BEGIN_SRC emacs-lisp
  (require 'cask "~/.cask/cask.el")
  ;; (require 'cask "/usr/local/share/emacs/site-lisp/cask/cask.el")
  (cask-initialize)
  (require 'pallet)
  (pallet-mode t)

  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("gnu" . "http://elpa.gnu.org/packages/") t)
  (package-initialize)
#+END_SRC

* UI preferences

** General

#+BEGIN_SRC emacs-lisp
  (global-linum-mode)
  (menu-bar-mode -1)
  
  
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))

  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

  ;; No cursor blinking, it's distracting
  (blink-cursor-mode 0)

  ;; yes or no as y or n
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Theme and font

#+BEGIN_SRC emacs-lisp
  (load-theme 'leuven t)
#+END_SRC

* Module Config

** Guide Key
Helper for key bindings

#+BEGIN_SRC emacs-lisp

  (require 'guide-key)
  (setq guide-key/guide-key-sequence t)
  (guide-key-mode 1)

#+END_SRC


** smex
Autocomplete for minibuffer

#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "M-x") 'smex)

#+END_SRC

** ivy
Better autocomplete

#+BEGIN_SRC emacs-lisp

  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
;;  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)

#+END_SRC


** Clojure

https://github.com/clojure-emacs/clj-refactor.el
#+BEGIN_SRC emacs-lisp
  (require 'clj-refactor)

  (defun my-clojure-mode-hook ()
  (clj-refactor-mode 1)
  (yas-minor-mode 1) ; for adding require/use/import statements
  ;; This choice of keybinding leaves cider-macroexpand-1 unbound
  (cljr-add-keybindings-with-prefix "C-c C-m"))

  (add-hook 'clojure-mode-hook #'my-clojure-mode-hook)
#+END_SRC

Improve parentheses display
#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook #'highlight-parentheses-mode)
  (add-hook 'clojure-mode-hook #'show-paren-mode)
  (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

Automatic indentation
#+BEGIN_SRC
  (add-hook 'clojure-mode-hook #'aggressive-indent-mode)
#+END_SRC

** Paredit
#+BEGIN_SRC emacs-lisp
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'clojure-mode-hook #'paredit-mode)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+END_SRC

** Company mode
#+BEGIN_SRC emacs-lisp
  (global-company-mode t)
;; (add-hook 'after-init-hook 'global-company-mode)

  (setq company-tooltip-limit 12)                      ; bigger popup window
  (setq company-idle-delay .1)                         ; decrease delay before autocompletion popup shows
  (setq company-echo-delay 0)                          ; remove annoying blinking
  (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
  (setq company-dabbrev-downcase nil)                  ; Do not convert to lowercase
  (setq company-selection-wrap-around t)               ; continue from top when reaching bottom

  ;;(require 'helm-config)
#+END_SRC

** Projectile

Enable global mode for projectile
#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
#+END_SRC

